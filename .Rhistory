install.packages(testit)
library(testit)
setwd("~/Documents/Organotypic_model_analysis")
#' ---
#' title: "merged biofilm assays for publication, analyize and visualize the data"
#'output:
#'  html_document:
#'    toc: true
#'    theme: united
#' ---
#/*    Analysis script for statistics and visualization of crystal violet biofilm assay*/
#/*    Copyright (C) 2016  Daniel Chan*/
#/*    This program is free software: you can redistribute it and/or modify*/
#/*    it under the terms of the GNU General Public License as published by*/
#/*    the Free Software Foundation, either version 3 of the License, or*/
#/*    (at your option) any later version.*/
#/*    This program is distributed in the hope that it will be useful,*/
#/*    but WITHOUT ANY WARRANTY; without even the implied warranty of*/
#/*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*/
#/*    GNU General Public License for more details.*/
#/*    You should have received a copy of the GNU General Public License*/
#/*    along with this program.  If not, see <http://www.gnu.org/licenses/>.*/
#/*making a note book with knitr.spin is preferable because of the dynamic possible code debugging*/
#/* YAML header, #' for drop into Rmarkdown (#, ## headers), #+ for chunks (try not to disrupt code chunks with comments, place before)*/
#/*set global knitr options*/
#+ knitr-options, message=FALSE, echo=FALSE
knitr::opts_chunk$set(warning = FALSE, tidy = FALSE)
#' #Initial data and analysis set up
#'
#+ import-libraries, message=FALSE
#import libraries
#statistical tests
require(stats)
require(lmerTest)
require(multcomp)
require(dunn.test)
require(orddom)
require(equivalence)
#plotting
require(gplots)
require(ggplot2)
require(ggthemes)
require(scales)
require(grid)
#data wrangl'n
require(gdata)
require(reshape2)
require(data.table)
require(dplyr)
require(tidyr)
require(purrr)
#+ functions, include=FALSE
logscale_sigbars_generator <- function (max_draw_dim, min_draw_dim, number_bar_levels = 1, tick_size = 0.01, default_step =1.5) {
#someday it'll be nice to have some input verification
print("positions generated:", quote = FALSE)
print("the levels are counted from the bottom to top",quote = FALSE)
print("p[level, 1:4] are the positions", quote = FALSE)
print("p[level, 5] contains the text position", quote = FALSE) #some guidance
range <- log(max_draw_dim) - log(min_draw_dim) #the range that the bars will be plotted in
tick_size_log <- log(max_draw_dim) * tick_size # the size of the downturned ticks
step <- ifelse((range / number_bar_levels) < 1.5, (range / number_bar_levels), 1.5) # the spacing between bars
p <- matrix(0,number_bar_levels, 5) # the matrix of the results
for (i in 1:number_bar_levels) {
bar_position <- log(min_draw_dim) + (step*i)
tick_postion <- bar_position - tick_size_log
text_position <- bar_position + (2 * tick_size_log)
p[i,] <- as.numeric(c(exp(tick_postion), exp(bar_position), exp(bar_position),exp(tick_postion), exp(text_position)))
} #make it
return(p)
}
effect_size_plot <- function(orddom_table) {
cliffd_plot <- ggplot(orddom_table, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = "Cliff's Delta", y = "Comparison") +
coord_cartesian(xlim = c(-1, 1)) +
facet_grid(.~timepoint) +
theme_mod
return(cliffd_plot)
}
#+ style, inlcude=FALSE
theme_mod <- theme_bw() +
theme(text = element_text(size = 16),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())
#and some xtable formatting options too
italic <- function(x){
paste0('{\\emph{', x, '}}')
}
bold <- function(x){
paste0('{\\bfseries ', x, '}')
}
#+ Session-info
sessionInfo() #for reproducibility
#+ some-other-options
original_par <- par() #for resetting to original par after generating the plot in the null device
#+ load-data
load("Data/crystal_violet_biofilm.RData")
norm_data <- norm_data[simple_id %in% c("wt_NA", "agrA_", "atl_", "icaA_", "srtA_", "agrA_pos1_agrA_20", "agrA_pos1_empty")]
#'
#' #Initial Visualize
#'
#+ dirty-visualze
#+ effect-size
data_summary <- norm_data %>%
group_by(simple_id) %>%
summarise(
mean = mean(OD_adjusted, na.rm = TRUE), # means comparison
sdev = sd(OD_adjusted, na.rm = TRUE),
ci_lower = t.test(OD_adjusted)$conf.int[1], #95% confidence intervals CANT DO IT CAUSE THE DATA?
ci_upper = t.test(OD_adjusted)$conf.int[2])
data_summary
#+ effect-size-plot, message=FALSE, fig.width=12, fig.height=10
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
transformed_data <- c("OD", "OD_adjusted") #different transformations/normalizations
alpha_level <- 0.05
blocking_factor <- "drop" #this is not a blocking factor, it includes all data
test_factor1 <- "simple_id"
set_data <- transformed_data[[2]]
set_test <- "ordinal" #ordinal <- non-paramtric, cliff's D, metric <- parametric, cohen's D
orddom_cols <- c("comparison", "timepoint", "Var2", "1-alpha", "A X>Y", "A Y>X", "CI high",
"CI low", "Cohen's d", "d CI high", "d CI low", "delta", "df", "H1 tails p/CI",
"N #Y<X", "N #Y=X", "N #Y>X", "n in X", "n in Y", "NNT", "p", "PS X>Y", "PS Y>X",
"s delta", "se delta", "type_title", "var d.i", "var delta", "var dij", "var dj.",
"var1_X", "var2_Y", "z/t score") #column names for orddom ouput
orddom_summary <- norm_data %>%
split(norm_data[[blocking_factor]], drop = TRUE) %>%
map(
function(blocked_data) {
combinations <- combn(unique(blocked_data[[test_factor1]]), 2)
df <- data.frame()
for (i in 1:dim(combinations)[[2]]) {
id1 <- unlist(combinations[,i])[[1]]
id2 <- unlist(combinations[,i])[[2]]
data1 <- blocked_data[blocked_data[[test_factor1]] == id1,]
data2 <- blocked_data[blocked_data[[test_factor1]] == id2,]
comparison <- paste(id1, id2, sep = "-")
#transformed data needs to know a position
data <- cbind(melt(orddom(data1[[set_data]], data2[[set_data]],
alpha = 0.05,
symmetric = FALSE,
onetailed = FALSE,
t.welch = TRUE)),
comparison)
df <- rbind(data, df)}
return(df)
}) %>% #calculate orddom matrix by blocking factor
at_depth(0, ~ bind_rows(.x, .id = "timepoint")) %>% #bind the data frames together by row
dcast(comparison + timepoint + Var2 ~ Var1) %>% #merge intp final data frame
map_at(orddom_cols[c(-1, -2, -3, -26,-31, -32)], as.numeric) %>%
as.data.frame() %>%
filter(Var2 == set_test)
#+ orddom-effect-size
orddom_cols <- c("comparison", "timepoint", "Var2", "1-alpha", "A X>Y", "A Y>X", "CI high",
"CI low", "Cohen's d", "d CI high", "d CI low", "delta", "df", "H1 tails p/CI",
"N #Y<X", "N #Y=X", "N #Y>X", "n in X", "n in Y", "NNT", "p", "PS X>Y", "PS Y>X",
"s delta", "se delta", "type_title", "var d.i", "var delta", "var dij", "var dj.",
"var1_X", "var2_Y", "z/t score") #column names for orddom ouput
orddom <- pairwise_data_table %>%
at_depth(1, ~ orddom(.x$cfu1, .x$cfu2)) %>%
at_depth(1, melt) %>% #manipulate to data frame
at_depth(0, ~ bind_rows(.x, .id = "comparison")) %>% #bind the data frames together by row
dcast(comparison + Var2 ~ Var1) %>% #merge intp final data frame
map_at(orddom_cols[c(-1, -2, -3, -26,-31, -32)], as.numeric) #convert to numeric data
ordinal_effsize <- ggplot(orddom_ordinal, aes(delta, comparison)) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high))
ordinal_effsize
cliffd_plot <- effect_size_plot(orddom_summary)
cliffd_plot
transformed_data <- c("OD", "OD_adjusted") #different transformations/normalizations
alpha_level <- 0.05
blocking_factor <- "drop" #this is not a blocking factor, it includes all data
test_factor1 <- "simple_id"
set_data <- transformed_data[[2]]
set_test <- "ordinal" #ordinal <- non-paramtric, cliff's D, metric <- parametric, cohen's D
#'
#' ##Effect Size
#'
#' Effect size is calculated and plotted
#'
orddom_cols <- c("comparison", "timepoint", "Var2", "1-alpha", "A X>Y", "A Y>X", "CI high",
"CI low", "Cohen's d", "d CI high", "d CI low", "delta", "df", "H1 tails p/CI",
"N #Y<X", "N #Y=X", "N #Y>X", "n in X", "n in Y", "NNT", "p", "PS X>Y", "PS Y>X",
"s delta", "se delta", "type_title", "var d.i", "var delta", "var dij", "var dj.",
"var1_X", "var2_Y", "z/t score") #column names for orddom ouput
orddom_summary <- norm_data %>%
split(norm_data[[blocking_factor]], drop = TRUE) %>%
map(
function(blocked_data) {
combinations <- combn(unique(blocked_data[[test_factor1]]), 2)
df <- data.frame()
for (i in 1:dim(combinations)[[2]]) {
id1 <- unlist(combinations[,i])[[1]]
id2 <- unlist(combinations[,i])[[2]]
data1 <- blocked_data[blocked_data[[test_factor1]] == id1,]
data2 <- blocked_data[blocked_data[[test_factor1]] == id2,]
comparison <- paste(id1, id2, sep = "-")
#transformed data needs to know a position
data <- cbind(melt(orddom(data1[[set_data]], data2[[set_data]],
alpha = 0.05,
symmetric = FALSE,
onetailed = FALSE,
t.welch = TRUE)),
comparison)
df <- rbind(data, df)}
return(df)
}) %>% #calculate orddom matrix by blocking factor
at_depth(0, ~ bind_rows(.x, .id = "timepoint")) %>% #bind the data frames together by row
dcast(comparison + timepoint + Var2 ~ Var1) %>% #merge intp final data frame
map_at(orddom_cols[c(-1, -2, -3, -26,-31, -32)], as.numeric) %>%
as.data.frame() %>%
filter(Var2 == set_test)
cliffd_plot <- effect_size_plot(orddom_summary)
cliffd_plot
str(orrdom summary)
str(orrdom_summary)
str(orddom_summary)
unique(norm_data$simple_id)
unique(levels(norm_data$simple_id))
label6 <- expression(italic(agrA[C123F]) + pOS1 italic(agrA[C123F]))
label6 <- expression(paste(italic(agrA[C123F]), " + ", "pOS1", italic(agrA)))
label6
parse(label6)
eval(label6)
label1 <- "wild type"
label2 <- expression(italic(agrA[C123F]))
label3 <- expression(italic(Delta*atl))
label4 <- expression(italic(paste("icaA", ":", ":", "erm")))
label5 <- expression(italic(paste("srt", ":", ":", "erm")))
label6 <- expression(paste(italic(agrA[C123F]), " + ", "pOS1", italic(agrA)))
label7 <- expression(italic(agrAanother[C123F]))
norm_data$simple_id <- mapvalues(norm_data$simple_id, c("wt_NA", "agrA_", "atl_", "icaA_", "srtA_", "agrA_pos1_agrA_20", "agrA_pos1_empty"),
c(label1, label2, label3, label4, label5, label6, label7))
??mapvalues
norm_data$simple_id <- plyr::mapvalues(norm_data$simple_id, c("wt_NA", "agrA_", "atl_", "icaA_", "srtA_", "agrA_pos1_agrA_20", "agrA_pos1_empty"),
c(label1, label2, label3, label4, label5, label6, label7))
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
data_summary <- norm_data %>%
group_by(simple_id) %>%
summarise(
mean = mean(OD_adjusted, na.rm = TRUE), # means comparison
sdev = sd(OD_adjusted, na.rm = TRUE),
ci_lower = t.test(OD_adjusted)$conf.int[1], #95% confidence intervals CANT DO IT CAUSE THE DATA?
ci_upper = t.test(OD_adjusted)$conf.int[2])
data_summary
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
load("Data/crystal_violet_biofilm.RData")
norm_data <- norm_data[simple_id %in% c("wt_NA", "agrA_", "atl_", "icaA_", "srtA_", "agrA_pos1_agrA_20", "agrA_pos1_empty")] #filter
#'
#' #Initial Visualize
#'
#+ dirty-visualze
#+ data-summary
data_summary <- norm_data %>%
group_by(simple_id) %>%
summarise(
mean = mean(OD_adjusted, na.rm = TRUE), # means comparison
sdev = sd(OD_adjusted, na.rm = TRUE),
ci_lower = t.test(OD_adjusted)$conf.int[1], #95% confidence intervals CANT DO IT CAUSE THE DATA?
ci_upper = t.test(OD_adjusted)$conf.int[2])
data_summary
l1 <- "wild type"
l2 <- expression(italic(agrA[C123F]))
l3 <- expression(italic(Delta*atl))
l4 <- expression(italic(paste("icaA", ":", ":", "erm")))
l5 <- expression(italic(paste("srt", ":", ":", "erm")))
l6 <- expression(paste(italic(agrA[C123F]), " + ", "pOS1", italic(agrA)))
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
scale_x_discrete(labels = c(l1, l2, l3, l4 ,l5, l6))
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
l6 <- expression(atop(italic(agrA[C123F]+), paste("pOS1", italic(agrA))))
l6 <- expression(atop(paste(italic(agrA[C123F], " +")), paste("pOS1", italic(agrA))))
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
scale_x_discrete(labels = c(l1, l2, l3, l4 ,l5, l6))
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
l1 <- "wild type"
l2 <- expression(italic(agrA[C123F]))
l3 <- expression(italic(Delta*atl))
l4 <- expression(italic(paste("icaA", ":", ":", "erm")))
l5 <- expression(italic(paste("srt", ":", ":", "erm")))
l6 <- expression(atop(italic(agrA[C123F]), paste("+ pOS1", italic(agrA))))
scale_x_discrete(labels = c(l1, l2, l3, l4 ,l5, l6, l7))
pos = position_dodge(width = 0.9)#for error bars to dodge dodging columns
data_summary_plot <- ggplot(data_summary, aes(simple_id, mean, ymin = ci_lower, ymax = ci_upper)) +
geom_bar(aes(fill = simple_id), stat="identity", position = pos, width = 0.9) +
theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
scale_x_discrete(labels = c(l1, l2, l3, l4 ,l5, l6))
geom_errorbar(aes(fill = simple_id), width = 0.2, position = pos)
data_summary_plot
l1 <- "wild type"
l2 <- expression(italic(agrA[C123F]))
l3 <- expression(italic(Delta*atl))
l4 <- expression(italic(paste("icaA", ":", ":", "erm")))
l5 <- expression(italic(paste("srt", ":", ":", "erm")))
l6 <- expression(atop(italic(agrA[C123F]), paste("+ pOS1 ", italic(agrA))))
l7 <- expression(atop(italic(agrA[C123F]), "+ pOS1 empty"))
effect_size_plot <- function(orddom_table) {
cliffd_plot <- ggplot(orddom_table, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = c(label1, label2, label3, label4, label5, label6, label7, label8, label9, label10)) +
coord_cartesian(xlim = c(-1, 1)) +
facet_grid(.~timepoint) +
theme_mod
return(cliffd_plot)
}
cliffd_plot <- effect_size_plot(orddom_summary)
?formula
?facet
?refomulate
?reformulate
effect_size_plot <- function(orddom_table, facet_type = blocking_factor, label_list = c(l1, l2, l3, l4, l5, l6, l7, l8, l9, l10)) {
cliffd_plot <- ggplot(orddom_table, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = label_list) +
coord_cartesian(xlim = c(-1, 1)) +
facet_grid(reformulate(".", facet_type)) +
theme_mod
return(cliffd_plot)
}
cliffd_plot <- effect_size_plot(orddom_summary, label_list = c(l1, l2))
cliffd_plot
str(orddom_summary)
effect_size_plot <- function(orddom_table, label_list = c(l1, l2, l3, l4, l5, l6, l7, l8, l9, l10)) {
cliffd_plot <- ggplot(orddom_table, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = label_list) +
coord_cartesian(xlim = c(-1, 1)) +
#    facet_grid(.~timepoint) +
#    facet_grid(reformulate(".", facet_type)) +
theme_mod
return(cliffd_plot)
}
cliffd_plot <- effect_size_plot(orddom_summary, label_list = c(l1, l2))
cliffd_plot
head(orddom_summary)
(orddom_summary$comparison)
orddom_sliced <- slice(orddom_summary, c(1,16:21))
orddom_sliced$comparison
l1 <- expression(paste(italic(agrA[C123F]), " + pOS1 ", italic(agrA), " vs. + pOS1 empty"))
l2 <- expression(paste("wild-type vs. ", italic(agrA[C123F]), " + pOS1 empty"))
cliffd_plot <- effect_size_plot(orddom_summary, label_list = c(l1, l2))
cliffd_plot
effect_size_plot <- function(orddom_table, label_list = c(l1, l2, l3)) {
cliffd_plot <- ggplot(orddom_table, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = label_list) +
coord_cartesian(xlim = c(-1, 1)) +
#    facet_grid(.~timepoint) +
#    facet_grid(reformulate(".", facet_type)) +
theme_mod
return(cliffd_plot)
}
orddom_sliced$comparison
l1 <- expression(atop(paste(italic(agrA[C123F]), " + pOS1 ", italic(agrA), " vs."), paste(italic(agrA[C123F]), " + pOS1 empty")))
l2 <- expression(atop("wild-type vs. ", paste(italic(agrA[C123F]), " + pOS1 empty")))
l3 <- expression(atop("wild-type vs. ", paste(italic(agrA[C123F]), " + pOS1 ", italic(agrA))))
l4 <- expression(atop("wild-type vs. ", paste("srtA", ":", ":", "erm")))
l5 <- expression(atop("wild-type vs. ", paste("icaA", ":", ":", "erm")))
l6 <- expression(atop("wild-type vs. ", italic(Delta*atl)))
l7 <- expression(atop("wild-type vs. ", italic(agrA[C123F])))
orddom_sliced <- slice(orddom_summary, c(1,16:21)) #filter
cliffd_plot <- effect_size_plot(orddom_sliced, label_list = c(l1, l2, l3, l4, l5, l6, l7))
cliffd_plot
orddom_sliced
cliffd_plot <- ggplot(orddom_sliced, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = c(l1, l2, l3, l4, l5, l6, l7)) +
coord_cartesian(xlim = c(-1, 1)) +
#    facet_grid(.~timepoint) +
#    facet_grid(reformulate(".", facet_type)) +
theme_mod
cliffd_plo
cliffd_plot <- ggplot(orddom_sliced, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
#  scale_y_discrete(labels = c(l1, l2, l3, l4, l5, l6, l7)) +
coord_cartesian(xlim = c(-1, 1)) +
#  facet_grid(.~timepoint) +
#  facet_grid(reformulate(".", facet_type)) +
theme_mod
cliffd_plot
cliffd_plot <- ggplot(orddom_sliced, aes(delta, comparison)) +
geom_vline(xintercept =  0, linetype = 2, alpha = 0.5) +
geom_point() +
geom_errorbarh(height = 0.2, aes(xmin = CI.low,
xmax = CI.high)) +
labs(x = expression(paste("Cliff's ", Delta)), y = "Comparison") +
scale_y_discrete(labels = c(l7, l6, l5, l4, l3, l2, l1)) +
coord_cartesian(xlim = c(-1, 1)) +
#  facet_grid(.~timepoint) +
#  facet_grid(reformulate(".", facet_type)) +
theme_mod
cliffd_plot
